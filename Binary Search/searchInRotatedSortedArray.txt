class Solution {
    public int search(int[] nums, int target) {
        int l=0, h = nums.length-1;

        while(l<=h) {
            int m = (l + h) /2;
            if(nums[m] == target) {
                return m;
            }    

            // Check if left of mid is sorted
            if(nums[l] <= nums[m]) {
                // check if target lies in the range, nums[l] <= target <= nums[m]
                if( nums[l] <= target && target <= nums[m]) {
                    // target lies in the left part.. so eliminate right subarray i.e, from mid to high
                    h = m - 1;
                }
                else {
                    // target lies in the right part... so eliminate left subarray i.e, from low to mid
                    l = m + 1;
                }
            }
            // right of mid is sorted
            else {
                // check if target lies in the range, nums[m] <= target <= nums[h]
                if( nums[m] <= target && target <= nums[h]) {
                    // target lies right side, so eliminate left sub array
                    l = m + 1;
                } 
                else {
                    // target lies on left side, so eliminate right sub array
                    h = m - 1;
                }
            }
        }
        return -1;
    }
}


Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1