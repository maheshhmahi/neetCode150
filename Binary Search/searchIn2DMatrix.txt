class Solution {

    public boolean binarySearch(int[] arr, int target) {
        int low = 0, high = arr.length;
        int mid;

        while(low<=high && low<arr.length) {
            mid = (low + high) / 2;
            if(arr[mid] == target) {
                return true;
            }
            if(target > arr[mid]) {
                low = mid+1;
            } 
            else {
                high = mid-1;
            }
        }
        return false;
    }

    public boolean searchMatrix(int[][] matrix, int target) {
        // for(int i=0; i< matrix.length; i++) {
        //     if(binarySearch(matrix[i], target)) {
        //         return true;
        //     } 
        // }
        // return false;

        int row = matrix.length-1, col = matrix[0].length-1;

        int top = 0, bottom = row;

        while(top <= bottom) {
            int mid = (top + bottom) / 2;

            if(target < matrix[mid][0]) {
                bottom = mid - 1;
            }


            else if(target > matrix[mid][col]) {
                top = mid + 1;
            }
            
            else {
                break;
            }

        }

        row = (top + bottom)/2;

        int l = 0, h = col;

        while(l<=h) {
            int mid = (l+h) /2;
            if(target == matrix[row][mid]) {
                return true;
            } 
            else if(target < matrix[row][mid]) {
                h = mid -1;
            }
            else {
                l = mid+1;
            }
        }

        return false;

    }
}


Input: matrix = [[1,3,5,7],
                [10,11,16,20],
                [23,30,34,60]], target = 3
Output: true

Input: matrix = [[1,3,5,7],
                [10,11,16,20],
                [23,30,34,60]], target = 13
Output: false


// First approach.

For each row apply binarySearch, which works in O(m log(n)) time

//second approach

to select which row to apply binarySearch, use binarySearch to select which row and in that row apply binarySearch again. 

which gives O(log(m) + log(n))