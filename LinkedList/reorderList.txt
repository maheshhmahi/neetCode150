/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next; // note down this... for finding loop we start from head only, but for this start from head next

        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        slow = slow.next; // important to note, because for odd numbers, we want the next part
        ListNode t1 = head;
        while(t1.next != slow) {
            t1 = t1.next;
        }
        t1.next = null;
        t1 = head;
        ListNode n1 = t1;

        ListNode prev = null;
        ListNode n2 = slow;
        while(slow != null) {
            n2 = slow.next;
            slow.next = prev;
            prev = slow;
            slow = n2;
        }
        t1 = head;
        n1 = t1;
        ListNode t2 = prev;
        n2 = t2;
 
        while(t1 != null && t2 != null) {
            n1 = t1.next;
            t1.next = t2;
            t1 = n1;
            n2 = t2.next;
            t2.next = t1;
            t2 = n2;
        }
    }
}