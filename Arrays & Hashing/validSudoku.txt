class Solution {

    public boolean isValidSudoku(char[][] board) {
        return validateRows(board) && validateColumns(board) && validateCubes(board);
    }

    public boolean validateRows(char[][] board) {
        Set<Character> set ;
        for(int i=0; i<board.length; i++) {
            set = new HashSet<>();
            for(int j = 0; j<board.length; j++) {
                //row
                if(board[i][j] != '.') {
                    if(set.contains(board[i][j])) {
                        return false;
                    } else {
                        set.add(board[i][j]);
                    }
                }
            }
        }
        return true;
    }

    public boolean validateColumns(char[][] board) {
        Set<Character> set ;
        for(int i=0; i<board.length; i++) {
            set = new HashSet<>();
            for(int j=0; j<board.length; j++) {
                //column
                if(board[j][i] != '.') {
                    if(set.contains(board[j][i])) {
                        return false;
                    } else {
                        set.add(board[j][i]);
                    }
                }
                
            }
        }
        return true;
    }

    public boolean validateCubes(char[][] board) {
        Map<String, Set<Character>> map = new HashMap<>();

        for(int i=0; i<board[0].length; i++) {
            
            for(int j = 0; j<board[0].length; j++) {
                if(board[i][j]!= '.') {
                    int x = i/3;
                    int y = j/3;
                    String key = "in the cube:" + x +"," +y;
                    System.out.println("actual : " + board[i][j]);
                    if(map.containsKey(key)) {
                         System.out.println("map.get(node) " + map.get(key));
                        if(map.get(key).contains(board[i][j])) {
                            return false;
                        } else {
                            map.get(key).add(board[i][j]);
                        } 
                    } else {

                        map.put(key, new HashSet<>());
                        map.get(key).add(board[i][j]);
                        System.out.println(map.get(key));
                    }
                }
                
            }
        }
        return true;
    }   
}



Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.