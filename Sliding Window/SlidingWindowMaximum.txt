class Solution {

    public int[] maxSlidingWindow(int[] nums, int k) {
        Deque<Integer> dq = new ArrayDeque<>();
        int n = nums.length;
        int[] res = new int[n-k+1];

        for(int i=0; i<k; i++) {
            while(dq.size() > 0 && nums[i] > dq.peekLast()) {
                dq.pollLast();
                
            }
            dq.addLast(nums[i]);
        }

        int l=0;

        for(int r = k-1; r<nums.length; r++) {
            res[l] = dq.peekFirst();
            
            if(nums[l] == dq.peekFirst()) {
                dq.pollFirst();
            }
            if(r+1 < nums.length) {
                while(dq.size() > 0 && nums[r+1] > dq.peekLast()) {
                    dq.pollLast();
                }
                dq.addLast(nums[r+1]);
            }
            l++;
            
        }
        return res;
    }
}


Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]



//Explanation

1. I maintained queue to maintain the max element at the start of the queue, The queue is always in the decreasing order.

2. initally for the window size from 0 to k, I added the elements into queue such that, if you encounter a number check with the peekLast element,

    if nums[i] > peekLast, then remove it from the deque. Continue to do in while loop.

    if it is less than peekLast, then simply addLast the element.

3. now add the peekFirst element into the res and slide the window.

4. now we need to remove the element present in left(l) position and add the element present in the moved right(r) position.

    before that check if the number you are removing is the max number, if yes, then remove it and continue it

    if not then do not remove it.

    ex: 2,3,4,5 and k = 2.
        when l = 0 and r = 1, deque = [3]
            now if we want to slide the window, we don't have to remove the front of the queue, because the element is not the max.

5. continue to do so.