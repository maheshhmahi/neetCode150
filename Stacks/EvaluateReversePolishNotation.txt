class Solution {
    public int getExpressionValue(String operand, int A, int B) {
        switch(operand){
            case "+" :
                return A+B;
            case "-":
                return B-A;
            case "*":
                return A*B;
            case "/":
                return B/A;
        }
        return 0;
    }
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        Set<String> operations = new HashSet<>();
        operations.add("+");
        operations.add("-");
        operations.add("/");
        operations.add("*");
        for(int i=0; i<tokens.length; i++) {
            if(operations.contains(tokens[i]) && !stack.empty()) {
                int A = stack.pop();
                int B;
                if(!stack.empty()) {
                    B = stack.pop();
                    stack.push(getExpressionValue(tokens[i], A, B));
                } else {
                    stack.push(A);
                }
            } else {
                Integer val = Integer.parseInt(tokens[i]);
                stack.push(val);
            }
            
        }
        return stack.peek();
    }
}


Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22