class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();

        for(int i=0; i<nums.length; i++) {
            if(i>0 && nums[i-1] == nums[i]) {
                continue; //important
            }

            int l = i+1;
            int r = nums.length-1;
            while(l<r) {
                int sumTriplets = nums[i] + nums[l] + nums[r];
                if(sumTriplets == 0 ) {
                    List<Integer> sum = Arrays.asList(nums[i], nums[l] , nums[r]);
                    res.add(sum);
                    l++;
                    while(nums[l-1] == nums[l] && l<r) //important to focus
                        l++;
                } else if(sumTriplets > 0) {
                    r--;
                } else {
                    l++;
                }
            }          
        }
        return res;
    }
}


Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


//note Sort and apply two sum. [important: Focus on duplicates, I have mentioned it on comments how to handle it]