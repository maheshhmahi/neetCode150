class Solution {
    public int trap(int[] height) {
        if(height == null) 
            return 0;
        int l=0, r=height.length-1;
        int leftMax=height[0], rightMax = height[height.length-1];
        int res = 0;
        while(l<r) {
            if(leftMax <= rightMax) {
                l++;
                leftMax = Math.max(leftMax, height[l]);
                res += leftMax-height[l];
            }
            else {
                r--;
                rightMax = Math.max(rightMax, height[r]);
                res += rightMax-height[r];
            }
        }
        return res;
    }
}


Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.


Explanation:

Approach 1;
the formula is, to find how much water it can store at i^th index is,  min[left, right] – curr[i]; 

so store three arrays, i.e maxLeft, maxRight and min(Left, Right)

for ex 
input(curr)  : [0,1,0,2,1,0,1,3,2,1,2,1]

for maxLeft, traverse from left to right and put the maximum value to left at each index.
maxLeft :      [0,0,1,1,2,2,2,2,3,3,3,3]

for maxRight do the same but traverse from right to left
maxRight:      [3,3,3,3,3,2,3,2,2,2,1,0]

now at each index find min(maxLeft, maxRight)

min(L,R):      [0,0,1,1,2,2,2,2,2,2,1,0]

now at each index using the formula min(L,R) – curr[i] >=0 then add the value if not put 0;

res[] =        [0,0,1,0,1,2,1,0,0,1,0,0]
then the total number of units water that can be trapped is

add the res arr , so the value will be 6

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        int[] minLR = new int[n];
        int lMax = 0;
        for(int i=0; i<n; i++) {
            leftMax[i] = lMax;
            lMax = Math.max(lMax, height[i]);
        }
        int rMax = 0;
        for(int i=n-1; i>0;i--) {
            rightMax[i] = rMax;
            rMax = Math.max(rMax, height[i]);
        }
        for(int i=0; i<n; i++) {
            minLR[i] = Math.min(leftMax[i], rightMax[i]);
        }
        int res = 0;
        for(int i=0; i<n; i++) {
            if(minLR[i] - height[i] > 0) {
                res+= minLR[i] - height[i];
            }
        }

        return res;
    }
}


Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9